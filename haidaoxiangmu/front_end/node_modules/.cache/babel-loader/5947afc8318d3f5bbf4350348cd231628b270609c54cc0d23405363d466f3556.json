{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'addMap',\n  data() {\n    return {\n      //地图初始配置\n      center: {\n        lng: 0,\n        lat: 0\n      },\n      zoom: 3,\n      marker: {},\n      position: {\n        lng: 0,\n        lat: 0\n      },\n      draggable: false,\n      //infowindow展示\n      show: false,\n      //需要绘制的图行\n      drawingPolygon: {\n        editing: false,\n        paths: []\n      },\n      drawingMarker: {},\n      //infowindow\n      infoPosition: {},\n      infoOwner: '',\n      infoproduct: '',\n      id: ''\n    };\n  },\n  methods: {\n    // 初始化地图参数\n    handler({\n      BMap,\n      map\n    }) {\n      // console.log(BMap, map)\n      this.center.lng = 122.048;\n      this.center.lat = 29.9424;\n      this.zoom = 16;\n      this.position.lng = 122.048;\n      this.position.lat = 29.9424;\n      this.draggable = true;\n    },\n    //获取池塘\n    getPonds() {\n      this.$axios({\n        url: '/api/ponds/getAll',\n        methods: 'GET'\n      }).then(res => {\n        console.log(res.data.data);\n        if (res.data.status == 200) {\n          this.$store.commit('ponds/setPolygons', res.data.data.data);\n        }\n      });\n    },\n    //跳转到水产\n    goProduct(id) {\n      this.$router.push({\n        path: `/products/add?id=${id}`\n      });\n    },\n    //计算中心点\n    getCenterPoint(path) {\n      //添加marker\n      //计算中心点\n      let lng = 0;\n      let lat = 0;\n      path.forEach((i, v) => {\n        lng = lng + i.lng;\n        lat = lat + i.lat;\n      });\n      lng = lng / path.length;\n      lat = lat / path.length;\n      let drawingObj = {\n        lng: lng,\n        lat: lat\n      };\n      return drawingObj;\n    },\n    //计算面积\n    getArea(path) {\n      let Arr = [];\n      //把path转化成需要的数组形式,path里现在是对象\n      path.forEach((i, v) => {\n        let arr = [];\n        arr.push(i.lng);\n        arr.push(i.lat);\n        Arr.push(arr);\n      });\n      Arr.push([path[0].lng, path[0].lat]);\n      var p = this.turf.polygon([Arr]);\n      // 平方米\n      var area = this.turf.area(p);\n      // 亩\n      var mu = area / (1000 * 2 / 3);\n      return mu;\n    },\n    infoWindowClose() {\n      this.show = false;\n      //全部设置为false\n      // this.$store.commit('ponds/setEditingFalse')\n      if (!this.EditingPonds) {\n        // this.$store.commit('ponds/setId','')\n      }\n    },\n    infoWindowOpen(item) {\n      this.infoPosition = {\n        lng: item.position.lng,\n        lat: item.position.lat\n      };\n      this.infoOwner = item.owner;\n      this.infoproduct = item.product;\n      setTimeout(() => {\n        this.show = true;\n        // this.$store.commit('ponds/setId',item.id)\n      }, 100);\n    },\n    //多边形更新函数\n    polygonUpdate(e) {\n      this.drawingPolygon.paths[0] = e.target.getPath();\n    },\n    polygonsUpdate(e) {\n      if (this.EditingPonds) {\n        let paths = e.target.getPath();\n        this.$store.commit('ponds/setDrawingPolygon', paths);\n        //中心点\n        let lng = 0;\n        let lat = 0;\n        paths.forEach((i, v) => {\n          lng = lng + i.lng;\n          lat = lat + i.lat;\n        });\n        lng = lng / paths.length;\n        lat = lat / paths.length;\n        this.$store.commit('ponds/setMarker', {\n          lng: lng,\n          lat: lat\n        });\n        //更改中心点位置\n        this.$store.commit('ponds/setPolygonCenterMarker', {\n          lng: lng,\n          lat: lat,\n          id: this.id\n        });\n\n        //面积\n        let Arr = [];\n        //把paths转化成需要的数组形式,paths里现在是对象\n        paths.forEach((i, v) => {\n          let arr = [];\n          arr.push(i.lng);\n          arr.push(i.lat);\n          Arr.push(arr);\n        });\n        Arr.push([paths[0].lng, paths[0].lat]);\n        var p = this.turf.polygon([Arr]);\n        // 平方米\n        var area = this.turf.area(p);\n        // 亩\n        var mu = area / (1000 * 2 / 3);\n        //store\n        this.$store.commit('ponds/setEstimateArea', mu);\n      }\n    },\n    //以下为画图的三个函数\n    syncPolygon(e) {\n      if (!this.drawingPolygon.editing) {\n        return;\n      }\n      const {\n        paths\n      } = this.drawingPolygon;\n      if (!paths.length) {\n        return;\n      }\n      const path = paths[paths.length - 1];\n      if (!path.length) {\n        return;\n      }\n      if (path.length === 1) {\n        path.push(e.point);\n      }\n      this.$set(path, path.length - 1, e.point);\n    },\n    newPolygon(e) {\n      if (!this.drawingPolygon.editing) {\n        return;\n      }\n      const {\n        paths\n      } = this.drawingPolygon;\n      if (!paths.length) {\n        paths.push([]);\n      }\n      const path = paths[paths.length - 1];\n      path.pop();\n      if (path.length) {\n        paths.push([]);\n      }\n      //计算出中心点，面积\n      var position = this.getCenterPoint(paths[0]);\n      this.drawingMarker = position;\n      var estimateArea = this.getArea(paths[0]);\n      //点的路径\n      var polygon = paths[0];\n\n      //把store里的form更新\n      var obj = {\n        position: position,\n        polygon: polygon,\n        owner: this.Form.owner,\n        ownerId: this.Form.ownerId,\n        product: this.Form.product,\n        productId: this.Form.productId,\n        area: this.Form.area,\n        estimateArea: estimateArea,\n        town: this.Form.town,\n        village: this.Form.village,\n        comment: this.Form.comment,\n        number: this.Form.number,\n        editing: false,\n        //id是可以随便设置的\n        id: 65535\n      };\n      this.$store.commit('ponds/setForm', obj);\n    },\n    paintPolygon(e) {\n      if (!this.drawingPolygon.editing) {\n        return;\n      }\n      const {\n        paths\n      } = this.drawingPolygon;\n      !paths.length && paths.push([]);\n      paths[paths.length - 1].push(e.point);\n    }\n  },\n  computed: {\n    Polygons() {\n      return this.$store.state.ponds.polygons;\n    },\n    AddPond() {\n      return this.$store.state.ponds.addPond;\n    },\n    EditPond() {\n      return this.$store.state.ponds.editPond;\n    },\n    Form() {\n      return this.$store.state.ponds.form;\n    }\n  },\n  watch: {\n    AddPond(n) {\n      this.drawingPolygon.editing = n;\n      if (!n) {\n        //把新增的多边形path清空\n        this.drawingPolygon.paths = [];\n      }\n    }\n  },\n  created() {\n    this.getPonds();\n  }\n};","map":{"version":3,"mappings":";AAiDA;EACAA;EACAC;IACA;MACA;MACAC;QAAAC;QAAAC;MAAA;MACAC;MACAC;MACAC;QAAAJ;QAAAC;MAAA;MACAI;MACA;MACAC;MACA;MACAC;QACAC;QACAC;MACA;MACAC;MACA;MACAC;MACAC;MACAC;MACAC;IAEA;EACA;EACAC;IACA;IACAC;MAAAC;MAAAC;IAAA;MACA;MACA;MACA;MACA;MAEA;MACA;MAEA;IAEA;IACA;IACAC;MACA;QACAC;QACAL;MACA;QACAM;QACA;UACA;QACA;MACA;IACA;IACA;IACAC;MACA;QACAC;MACA;IACA;IAEA;IACAC;MAEA;MACA;MACA;MACA;MAEAD;QACAvB;QACAC;MACA;MAEAD;MACAC;MACA;QACAD;QACAC;MACA;MACA;IACA;IACA;IACAwB;MAEA;MACA;MACAF;QACA;QACAG;QACAA;QACAC;MACA;MACAA,UACAJ,aACAA,YACA;MAEA;MACA;MACA;MACA;MACA;MAEA;IACA;IAEAK;MACA;MACA;MACA;MACA;QACA;MAAA;IAIA;IACAC;MAEA;QACA7B;QACAC;MACA;MACA;MACA;MACA6B;QACA;QACA;MACA;IAEA;IAEA;IACAC;MACA;IACA;IACAC;MACA;QACA;QACA;QACA;QACA;QACA;QACAvB;UACAT;UACAC;QACA;QACAD;QACAC;QAEA;UAAAD;UAAAC;QAAA;QACA;QACA;UAAAD;UAAAC;UAAAa;QAAA;;QAGA;QACA;QACA;QACAL;UACA;UACAiB;UACAA;UACAC;QACA;QACAA,UACAlB,cACAA,aACA;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;MAEA;IAEA;IACA;IACAwB;MACA;QACA;MACA;MACA;QAAAxB;MAAA;MACA;QACA;MACA;MACA;MACA;QACA;MACA;MACA;QACAc;MACA;MACA;IACA;IACAW;MACA;QACA;MACA;MACA;QAAAzB;MAAA;MACA;QACAA;MACA;MACA;MACAc;MACA;QACAd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;QACAL;QACA+B;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QAEArC;QACA;QACAM;MACA;MACA;IAEA;IACAgC;MACA;QACA;MACA;MACA;QAAArC;MAAA;MACA;MACAA;IAEA;EACA;EACAsC;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACAH;MACA;MACA;QACA;QACA;MACA;IACA;EACA;EACAI;IACA;EACA;AACA","names":["name","data","center","lng","lat","zoom","marker","position","draggable","show","drawingPolygon","editing","paths","drawingMarker","infoPosition","infoOwner","infoproduct","id","methods","handler","BMap","map","getPonds","url","console","goProduct","path","getCenterPoint","getArea","arr","Arr","infoWindowClose","infoWindowOpen","setTimeout","polygonUpdate","polygonsUpdate","syncPolygon","newPolygon","polygon","owner","ownerId","product","productId","area","estimateArea","town","village","comment","number","paintPolygon","computed","Polygons","AddPond","EditPond","Form","watch","created"],"sourceRoot":"src/components/ponds/AddPonds","sources":["AddMap_1.vue"],"sourcesContent":["<template>\r\n    <div class=\"addMap\">\r\n        <baidu-map  :scroll-wheel-zoom=\"true\" class=\"map\" :center=\"center\" :zoom=\"zoom\" @ready=\"handler\" map-type=\"BMAP_HYBRID_MAP\"\r\n            @mousemove=\"syncPolygon\" @click=\"paintPolygon\" @rightclick=\"newPolygon\"\r\n        >\r\n\r\n            <bm-scale anchor=\"BMAP_ANCHOR_TOP_RIGHT\"></bm-scale>\r\n            <bm-navigation anchor=\"BMAP_ANCHOR_TOP_RIGHT\"></bm-navigation>\r\n\r\n            <bm-marker \r\n                v-for=\"(item) in Polygons\"\r\n                :key=\"item.lat\"\r\n                :position=\"item.position\" \r\n                @click=\"infoWindowOpen(item)\"\r\n            >\r\n            </bm-marker>\r\n\r\n            <bm-info-window \r\n                :position=\"infoPosition\"\r\n                :show=\"show\" \r\n                @close=\"infoWindowClose\"\r\n            >\r\n                <div>当前池塘详细信息：</div>\r\n                <div>池塘负责人：{{infoOwner.name}}</div>\r\n                <div>养殖品种：<el-button @click=\"goProduct(infoproduct.id)\" type=\"text\">{{infoproduct.name}}</el-button></div>\r\n                <el-button type=\"text\">查看该池塘详细信息</el-button>\r\n            </bm-info-window>\r\n\r\n            <bm-polygon \r\n                \r\n                v-for=\"(item,index) in Polygons\" \r\n                :key=\"index\" \r\n                :path=\"item.polygon\"\r\n                :editing=\"item.editing\"\r\n                @lineupdate='polygonsUpdate'\r\n            ></bm-polygon>\r\n            \r\n            <bm-marker v-if=\"drawingMarker\" :position='drawingMarker' ></bm-marker>\r\n            <bm-polygon \r\n                :path=\"path\" \r\n                v-for=\"path,index of drawingPolygon.paths\"\r\n                :key=\"index+65535\"\r\n            ></bm-polygon>\r\n\r\n        </baidu-map>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name:'addMap',\r\n    data(){\r\n        return{\r\n            //地图初始配置\r\n            center: {lng: 0, lat: 0},\r\n            zoom: 3,\r\n            marker:{},\r\n            position:{lng: 0, lat: 0},\r\n            draggable:false,\r\n            //infowindow展示\r\n            show:false,\r\n            //需要绘制的图行\r\n            drawingPolygon: {\r\n                editing: false,\r\n                paths: []\r\n            },\r\n            drawingMarker:{},\r\n            //infowindow\r\n            infoPosition:{},\r\n            infoOwner:'',\r\n            infoproduct:'',\r\n            id:'',\r\n\r\n        }\r\n    },\r\n    methods:{\r\n        // 初始化地图参数\r\n        handler ({BMap, map}) {\r\n            // console.log(BMap, map)\r\n            this.center.lng = 122.048\r\n            this.center.lat = 29.9424\r\n            this.zoom = 16\r\n\r\n            this.position.lng = 122.048\r\n            this.position.lat = 29.9424\r\n\r\n            this.draggable=true\r\n\r\n        },\r\n        //获取池塘\r\n        getPonds(){\r\n            this.$axios({\r\n                url:'/api/ponds/getAll',\r\n                methods:'GET'\r\n            }).then(res=>{\r\n                console.log(res.data.data);\r\n                if(res.data.status==200){\r\n                    this.$store.commit('ponds/setPolygons',res.data.data.data)\r\n                }\r\n            })\r\n        },\r\n        //跳转到水产\r\n        goProduct(id){\r\n            this.$router.push({\r\n                path:`/products/add?id=${id}`\r\n            })\r\n        },\r\n\r\n        //计算中心点\r\n        getCenterPoint(path){\r\n            \r\n            //添加marker\r\n            //计算中心点\r\n            let lng=0\r\n            let lat=0\r\n\r\n            path.forEach((i,v)=>{\r\n                lng=lng+i.lng\r\n                lat=lat+i.lat\r\n            })\r\n            \r\n            lng=lng/path.length\r\n            lat=lat/path.length\r\n            let drawingObj={\r\n                lng:lng,\r\n                lat:lat\r\n            }\r\n            return drawingObj\r\n        },\r\n        //计算面积\r\n        getArea(path){\r\n\r\n            let Arr=[]\r\n            //把path转化成需要的数组形式,path里现在是对象\r\n            path.forEach((i,v)=>{\r\n                let arr=[]\r\n                arr.push(i.lng)\r\n                arr.push(i.lat)\r\n                Arr.push(arr)\r\n            })\r\n            Arr.push([\r\n                path[0].lng,\r\n                path[0].lat\r\n            ])\r\n\r\n            var p=this.turf.polygon([Arr])\r\n            // 平方米\r\n            var area=this.turf.area(p)\r\n            // 亩\r\n            var mu=area/(1000*2/3)\r\n\r\n            return mu\r\n        },\r\n\r\n        infoWindowClose () {\r\n            this.show = false\r\n            //全部设置为false\r\n            // this.$store.commit('ponds/setEditingFalse')\r\n            if(!this.EditingPonds){\r\n                // this.$store.commit('ponds/setId','')\r\n            }\r\n            \r\n\r\n        },\r\n        infoWindowOpen (item) {\r\n\r\n            this.infoPosition={\r\n                lng:item.position.lng,\r\n                lat:item.position.lat\r\n            }\r\n            this.infoOwner=item.owner\r\n            this.infoproduct=item.product\r\n            setTimeout(()=>{\r\n                this.show = true\r\n                // this.$store.commit('ponds/setId',item.id)\r\n            },100)\r\n\r\n        },\r\n\r\n        //多边形更新函数\r\n        polygonUpdate(e){\r\n            this.drawingPolygon.paths[0]=e.target.getPath()\r\n        },\r\n        polygonsUpdate(e){\r\n            if(this.EditingPonds){\r\n                let paths=e.target.getPath()\r\n                this.$store.commit('ponds/setDrawingPolygon',paths)\r\n                //中心点\r\n                let lng=0\r\n                let lat=0\r\n                paths.forEach((i,v)=>{\r\n                    lng=lng+i.lng\r\n                    lat=lat+i.lat\r\n                })\r\n                lng=lng/paths.length\r\n                lat=lat/paths.length\r\n\r\n                this.$store.commit('ponds/setMarker',{lng:lng,lat:lat})\r\n                //更改中心点位置\r\n                this.$store.commit('ponds/setPolygonCenterMarker',{lng:lng,lat:lat,id:this.id})\r\n\r\n\r\n                //面积\r\n                let Arr=[]\r\n                //把paths转化成需要的数组形式,paths里现在是对象\r\n                paths.forEach((i,v)=>{\r\n                    let arr=[]\r\n                    arr.push(i.lng)\r\n                    arr.push(i.lat)\r\n                    Arr.push(arr)\r\n                })\r\n                Arr.push([\r\n                    paths[0].lng,\r\n                    paths[0].lat\r\n                ])\r\n\r\n                var p=this.turf.polygon([Arr])\r\n                // 平方米\r\n                var area=this.turf.area(p)\r\n                // 亩\r\n                var mu=area/(1000*2/3)\r\n                //store\r\n                this.$store.commit('ponds/setEstimateArea',mu)\r\n\r\n            }\r\n            \r\n        },\r\n        //以下为画图的三个函数\r\n        syncPolygon (e) {\r\n            if (!this.drawingPolygon.editing) {\r\n                return\r\n            }\r\n            const {paths} = this.drawingPolygon\r\n            if (!paths.length) {\r\n                return\r\n            }\r\n            const path = paths[paths.length - 1]\r\n            if (!path.length) {\r\n                return\r\n            }\r\n            if (path.length === 1) {\r\n                path.push(e.point)\r\n            }\r\n            this.$set(path, path.length - 1, e.point)\r\n        },\r\n        newPolygon (e) {\r\n            if (!this.drawingPolygon.editing) {\r\n                return\r\n            }\r\n            const {paths} = this.drawingPolygon\r\n            if(!paths.length) {\r\n                paths.push([])\r\n            }\r\n            const path = paths[paths.length - 1]\r\n            path.pop()\r\n            if (path.length) {\r\n                paths.push([])\r\n            }\r\n            //计算出中心点，面积\r\n            var position=this.getCenterPoint(paths[0])\r\n            this.drawingMarker=position\r\n            var estimateArea=this.getArea(paths[0])\r\n            //点的路径\r\n            var polygon=paths[0]\r\n\r\n            //把store里的form更新\r\n            var obj={\r\n                position:position,\r\n                polygon:polygon,\r\n                owner:this.Form.owner,\r\n                ownerId:this.Form.ownerId,\r\n                product:this.Form.product,\r\n                productId:this.Form.productId,\r\n                area:this.Form.area,\r\n                estimateArea:estimateArea,\r\n                town:this.Form.town,\r\n                village:this.Form.village,\r\n                comment:this.Form.comment,\r\n                number:this.Form.number,\r\n                \r\n                editing:false,\r\n                //id是可以随便设置的\r\n                id:65535,\r\n            }\r\n            this.$store.commit('ponds/setForm',obj)\r\n            \r\n        },\r\n        paintPolygon (e) {\r\n            if (!this.drawingPolygon.editing) {\r\n                return\r\n            }\r\n            const {paths} = this.drawingPolygon\r\n            !paths.length && paths.push([])\r\n            paths[paths.length - 1].push(e.point)\r\n            \r\n        }\r\n    },\r\n    computed:{\r\n        Polygons(){\r\n            return this.$store.state.ponds.polygons\r\n        },\r\n        AddPond(){\r\n            return this.$store.state.ponds.addPond\r\n        },\r\n        EditPond(){\r\n            return this.$store.state.ponds.editPond\r\n        },\r\n        Form(){\r\n            return this.$store.state.ponds.form\r\n        },\r\n    },\r\n    watch:{\r\n        AddPond(n){\r\n            this.drawingPolygon.editing=n\r\n            if(!n){\r\n                //把新增的多边形path清空\r\n                this.drawingPolygon.paths=[]\r\n            }\r\n        }\r\n    },\r\n    created(){\r\n        this.getPonds()\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .addMap{\r\n        width: 100%;\r\n        height: 100%;\r\n        .map{\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n    }\r\n\r\n    .infoNone{\r\n        display: none;\r\n        opacity: 0;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}