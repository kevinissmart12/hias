{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  namespaced: true,\n  state: {\n    polygons: [],\n    //是否显示绘制按钮\n    //0=>添加池塘,1=>停止绘制\n    drawing: 0,\n    editingPonds: false,\n    //owner list，渲染的是选择的表\n    owner: [],\n    //product\n    product: [],\n    //新添加的图形的中心点经纬度\n    marker: {},\n    //area\n    estimateArea: '',\n    area: \"\",\n    //drawingPolygon\n    drawingPolygon: '',\n    //town/village\n    town: '',\n    village: '',\n    comment: '',\n    //owner，渲染点击点后的情况\n    ownerMarker: '',\n    productMarker: '',\n    number: '',\n    id: \"\"\n  },\n  mutations: {\n    //对获取的池塘数据进行处理\n    setPolygons(state, data) {\n      data.forEach((i, v) => {\n        let object = {\n          position: {\n            lat: '',\n            lng: ''\n          },\n          polygon: [],\n          owner: {},\n          product: {},\n          area: '',\n          estimateArea: '',\n          town: '',\n          village: '',\n          comment: '',\n          number: '',\n          editing: false,\n          id: v + 1\n        };\n        object.position.lat = i.lat;\n        object.position.lng = i.lng;\n        //对i.polygon做变化\n        let tempP = i.polygon.split(';');\n        tempP.forEach(subi => {\n          let lat = subi.split(',')[1];\n          let lng = subi.split(',')[0];\n          let temp_obj = {\n            lat: lat,\n            lng: lng\n          };\n          object.polygon.push(temp_obj);\n        });\n        //对池塘的owner做处理\n        object.owner = i.owner;\n\n        //对池塘的养殖品种做处理\n        object.product = i.product;\n        object.area = i.area;\n        object.estimateArea = i.estimateArea;\n        object.town = i.town;\n        object.village = i.village;\n        object.comment = i.comment;\n        object.number = i.number;\n        state.polygons.push(object);\n      });\n    },\n    setEditing(state, data) {\n      state.polygons.forEach((i, v) => {\n        if (data.id == i.id) {\n          i.editing = data.editing;\n        }\n      });\n    },\n    setEditingFalse(state) {\n      state.polygons.forEach((i, v) => {\n        i.editing = false;\n      });\n    },\n    setDrawing(state, data) {\n      state.drawing = data;\n    },\n    setEditingPonds(state, data) {\n      state.editingPonds = data;\n    },\n    setOwner(state, data) {\n      state.owner = data;\n    },\n    setProduct(state, data) {\n      state.product = data;\n    },\n    setId(state, data) {\n      state.id = data;\n    },\n    setMarker(state, data) {\n      state.marker = data;\n    },\n    setPolygonCenterMarker(state, data) {\n      state.polygons.forEach((i, v) => {\n        if (i.id == data.id) {\n          i.position.lng = data.lng;\n          i.position.lat = data.lng;\n        }\n      });\n    },\n    setEstimateArea(state, data) {\n      state.estimateArea = data;\n    },\n    setArea(state, data) {\n      state.area = data;\n    },\n    setTown(state, data) {\n      state.town = data;\n    },\n    setVillage(state, data) {\n      state.village = data;\n    },\n    setComment(state, data) {\n      state.comment = data;\n    },\n    setOwnerMarker(state, data) {\n      state.ownerMarker = data;\n    },\n    setProductMarker(state, data) {\n      state.productMarker = data;\n    },\n    setNumber(state, data) {\n      state.number = data;\n    },\n    setDrawingPolygon(state, data) {\n      console.log(data);\n      let str = '';\n      data.forEach((i, v) => {\n        str = str.concat(i.lng, ',', i.lat, ';');\n      });\n      str = str.slice(0, str.length - 1);\n      state.drawingPolygon = str;\n    }\n  }\n};","map":{"version":3,"names":["namespaced","state","polygons","drawing","editingPonds","owner","product","marker","estimateArea","area","drawingPolygon","town","village","comment","ownerMarker","productMarker","number","id","mutations","setPolygons","data","forEach","i","v","object","position","lat","lng","polygon","editing","tempP","split","subi","temp_obj","push","setEditing","setEditingFalse","setDrawing","setEditingPonds","setOwner","setProduct","setId","setMarker","setPolygonCenterMarker","setEstimateArea","setArea","setTown","setVillage","setComment","setOwnerMarker","setProductMarker","setNumber","setDrawingPolygon","console","log","str","concat","slice","length"],"sources":["C:/Users/29903/Desktop/毕业设计的各种准备/haidaoxiangmu/hias/src/store/Ponds/index.js"],"sourcesContent":["export default {\r\n    namespaced:true,\r\n    state:{\r\n        polygons:[],\r\n        \r\n\r\n        //是否显示绘制按钮\r\n        //0=>添加池塘,1=>停止绘制\r\n        drawing:0,\r\n        editingPonds:false,\r\n\r\n\r\n        //owner list，渲染的是选择的表\r\n        owner:[],\r\n\r\n        //product\r\n        product:[],\r\n\r\n        //新添加的图形的中心点经纬度\r\n        marker:{},\r\n        //area\r\n        estimateArea:'',\r\n        area:\"\",\r\n        //drawingPolygon\r\n        drawingPolygon:'',\r\n        //town/village\r\n        town:'',\r\n        village:'',\r\n        comment:'',\r\n        //owner，渲染点击点后的情况\r\n        ownerMarker:'',\r\n        productMarker:'',\r\n        number:'',\r\n        id:\"\"\r\n    },\r\n    mutations:{\r\n        //对获取的池塘数据进行处理\r\n        setPolygons(state,data){\r\n\r\n            data.forEach((i,v)=>{\r\n                let object={\r\n                    position:{\r\n                        lat:'',\r\n                        lng:'',\r\n                    },\r\n                    polygon:[],\r\n                    owner:{},\r\n                    product:{},\r\n                    area:'',\r\n                    estimateArea:'',\r\n                    town:'',\r\n                    village:'',\r\n                    comment:'',\r\n                    number:'',\r\n                    editing:false,\r\n                    id:v+1,\r\n                }\r\n                object.position.lat=i.lat\r\n                object.position.lng=i.lng\r\n                //对i.polygon做变化\r\n                let tempP=i.polygon.split(';')\r\n                tempP.forEach(subi=>{\r\n                    let lat=subi.split(',')[1]\r\n                    let lng=subi.split(',')[0]\r\n                    let temp_obj={\r\n                        lat:lat,\r\n                        lng:lng\r\n                    }\r\n                    object.polygon.push(temp_obj)\r\n                })\r\n                //对池塘的owner做处理\r\n                object.owner=i.owner\r\n\r\n                //对池塘的养殖品种做处理\r\n                object.product=i.product\r\n\r\n                object.area=i.area\r\n                object.estimateArea=i.estimateArea\r\n                object.town=i.town\r\n                object.village=i.village\r\n                object.comment=i.comment\r\n                object.number=i.number\r\n                state.polygons.push(object)\r\n            })\r\n        },\r\n\r\n        setEditing(state,data){\r\n            state.polygons.forEach((i,v)=>{\r\n                if(data.id==i.id){\r\n                    i.editing=data.editing\r\n                }\r\n            })\r\n        },\r\n        setEditingFalse(state){\r\n            state.polygons.forEach((i,v)=>{\r\n                i.editing=false\r\n            })\r\n        },\r\n        \r\n        setDrawing(state,data){\r\n            state.drawing=data\r\n        },\r\n        setEditingPonds(state,data){\r\n            state.editingPonds=data\r\n        },\r\n\r\n\r\n        setOwner(state,data){\r\n            state.owner=data\r\n        },\r\n        setProduct(state,data){\r\n            state.product=data\r\n        },\r\n        setId(state,data){\r\n            state.id=data\r\n        },\r\n\r\n        setMarker(state,data){\r\n            state.marker=data\r\n        },\r\n\r\n        setPolygonCenterMarker(state,data){\r\n            state.polygons.forEach((i,v)=>{\r\n                if(i.id==data.id){\r\n                    i.position.lng=data.lng\r\n                    i.position.lat=data.lng\r\n\r\n                }\r\n            })\r\n        },\r\n\r\n        setEstimateArea(state,data){\r\n            state.estimateArea=data\r\n        },\r\n        setArea(state,data){\r\n            state.area=data\r\n        },\r\n        setTown(state,data){\r\n            state.town=data\r\n        },\r\n        setVillage(state,data){\r\n            state.village=data\r\n        },\r\n        setComment(state,data){\r\n            state.comment=data\r\n        },\r\n        setOwnerMarker(state,data){\r\n            state.ownerMarker=data\r\n        },\r\n        setProductMarker(state,data){\r\n            state.productMarker=data\r\n        },\r\n        setNumber(state,data){\r\n            state.number=data\r\n        },\r\n        setDrawingPolygon(state,data){\r\n            console.log(data);\r\n            let str=''\r\n            data.forEach((i,v)=>{\r\n                str=str.concat(i.lng,',',i.lat,';')\r\n            })\r\n            str=str.slice(0, str.length - 1)\r\n            \r\n            state.drawingPolygon=str\r\n        }\r\n\r\n    }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}