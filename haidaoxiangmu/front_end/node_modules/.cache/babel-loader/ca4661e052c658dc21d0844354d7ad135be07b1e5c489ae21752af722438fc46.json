{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"addMap\",\n  data() {\n    return {\n      //地图初始配置\n      center: {\n        lng: 0,\n        lat: 0\n      },\n      zoom: 3,\n      marker: {},\n      position: {\n        lng: 0,\n        lat: 0\n      },\n      draggable: false,\n      show: false,\n      //需要绘制的图行\n      drawingPolygon: {\n        editing: false,\n        paths: []\n      },\n      drawingMarker: {},\n      //当前绘制的多边形是否能编辑\n      drawingEditing: false,\n      //infowindow\n      infoPosition: {},\n      infoOwner: '',\n      infoproduct: '',\n      id: ''\n    };\n  },\n  methods: {\n    drawEdit() {\n      this.drawingEditing = true;\n    },\n    polygonUpdate(e) {\n      this.drawingPolygon.paths[0] = e.target.getPath();\n    },\n    paintPolygon(e) {\n      if (!this.drawingPolygon.editing) {\n        return;\n      }\n      const {\n        paths\n      } = this.drawingPolygon;\n      !paths.length && paths.push([]);\n      paths[paths.length - 1].push(e.point);\n    },\n    syncPolygon(e) {\n      if (!this.drawingPolygon.editing) {\n        return;\n      }\n      const {\n        paths\n      } = this.drawingPolygon;\n      if (!paths.length) {\n        return;\n      }\n      const path = paths[paths.length - 1];\n      if (!path.length) {\n        return;\n      }\n      if (path.length === 1) {\n        path.push(e.point);\n      }\n      this.$set(path, path.length - 1, e.point);\n    },\n    newPolygon(e) {\n      if (!this.drawingPolygon.editing) {\n        return;\n      }\n      const {\n        paths\n      } = this.drawingPolygon;\n      if (!paths.length) {\n        paths.push([]);\n      }\n      const path = paths[paths.length - 1];\n      path.pop();\n      if (path.length) {\n        paths.push([]);\n      }\n      // this.getCenterPoint()\n      // this.getArea()\n      //此后为编辑模式\n      this.$store.commit('ponds/setDrawing', 2);\n    },\n    // 初始化地图参数\n    handler({\n      BMap,\n      map\n    }) {\n      // console.log(BMap, map)\n      this.center.lng = 122.048;\n      this.center.lat = 29.9424;\n      this.zoom = 16;\n      this.position.lng = 122.048;\n      this.position.lat = 29.9424;\n      this.draggable = true;\n    },\n    infoWindowClose() {\n      this.show = false;\n      //全部设置为false\n      this.$store.commit('ponds/setEditingFalse');\n    },\n    infoWindowOpen(item) {\n      this.infoPosition = {\n        lng: item.position.lng,\n        lat: item.position.lat\n      };\n      this.infoOwner = item.owner;\n      this.infoproduct = item.product;\n      this.id = item.id;\n      setTimeout(() => {\n        this.show = true;\n      }, 100);\n      this.$store.commit('ponds/setMarker', item.position);\n      this.$store.commit('ponds/setEstimateArea', item.estimateArea);\n      this.$store.commit('ponds/setArea', item.area);\n      this.$store.commit('ponds/setTown', item.town);\n      this.$store.commit('ponds/setVillage', item.village);\n      this.$store.commit('ponds/setComment', item.comment);\n      this.$store.commit('ponds/setNumber', item.number);\n      this.$store.commit('ponds/setId', item.id);\n\n      //owner/product\n      this.$store.commit('ponds/setOwnerMarker', item.owner);\n      this.$store.commit('ponds/setProductMarker', item.product);\n    },\n    //获取池塘\n    getPonds() {\n      this.$axios({\n        url: '/api/ponds/getAll',\n        methods: 'GET'\n      }).then(res => {\n        console.log(res.data.data);\n        if (res.data.status == 200) {\n          this.$store.commit('ponds/setPolygons', res.data.data.data);\n        }\n      });\n    },\n    goProduct(id) {\n      // console.log(id);\n      this.$router.push({\n        path: `/products/add?id=${id}`\n      });\n    },\n    //计算中心点\n    getCenterPoint() {\n      const {\n        paths\n      } = this.drawingPolygon;\n      //添加marker\n      //计算中心点\n      let lng = 0;\n      let lat = 0;\n      paths[0].forEach((i, v) => {\n        lng = lng + i.lng;\n        lat = lat + i.lat;\n      });\n      lng = lng / paths[0].length;\n      lat = lat / paths[0].length;\n      let drawingObj = {\n        lng: lng,\n        lat: lat\n      };\n      this.drawingMarker = drawingObj;\n      this.$store.commit('ponds/setMarker', this.drawingMarker);\n    },\n    //计算面积\n    getArea() {\n      let paths = this.drawingPolygon.paths[0];\n      let Arr = [];\n      //把paths转化成需要的数组形式,paths里现在是对象\n      paths.forEach((i, v) => {\n        let arr = [];\n        arr.push(i.lng);\n        arr.push(i.lat);\n        Arr.push(arr);\n      });\n      Arr.push([paths[0].lng, paths[0].lat]);\n      var p = this.turf.polygon([Arr]);\n      // 平方米\n      var area = this.turf.area(p);\n      // 亩\n      var mu = area / (1000 * 2 / 3);\n      //store\n      this.$store.commit('ponds/setEstimateArea', mu);\n    },\n    //新池塘上传store\n    getDrawingPolygon() {\n      this.$store.commit('ponds/setDrawingPolygon', this.drawingPolygon.paths[0]);\n    },\n    pondsEditing(id) {\n      //使当前点击的点的editing=true\n      this.$store.commit('ponds/setEditing', {\n        id: id,\n        editing: true\n      });\n      setTimeout(() => {\n        this.show = false;\n      }, 1000);\n    }\n  },\n  created() {\n    this.getPonds();\n  },\n  mounted() {},\n  computed: {\n    Drawing() {\n      return this.$store.state.ponds.drawing;\n    },\n    Polygons() {\n      return this.$store.state.ponds.polygons;\n    },\n    Id() {\n      return this.$store.state.ponds.id;\n    }\n  },\n  watch: {\n    Drawing(n, o) {\n      if (n == 0) {\n        this.drawingPolygon.editing = false;\n      } else if (n == 1) {\n        this.drawingPolygon.editing = true;\n      } else if (n == 2) {\n        this.drawingEditing = false;\n        this.drawingPolygon.editing = false;\n        //计算中心点\n        this.getCenterPoint();\n        //计算面积\n        this.getArea();\n        //新池塘上传store\n        this.getDrawingPolygon();\n      } else if (n == 3) {\n        this.drawingEditing = true;\n        this.drawingPolygon.editing = false;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAoDA;EACAA;EACAC;IACA;MACA;MACAC;QAAAC;QAAAC;MAAA;MACAC;MACAC;MACAC;QAAAJ;QAAAC;MAAA;MACAI;MACAC;MAEA;MACAC;QACAC;QACAC;MACA;MACAC;MACA;MACAC;MAEA;MACAC;MACAC;MACAC;MACAC;IAEA;EACA;EACAC;IAEAC;MACA;IACA;IACAC;MAEA;IAEA;IAGAC;MACA;QACA;MACA;MACA;QAAAV;MAAA;MAEA;MAEAA;IAGA;IACAW;MACA;QACA;MACA;MACA;QAAAX;MAAA;MACA;QACA;MACA;MACA;MACA;QACA;MACA;MACA;QACAY;MACA;MACA;IACA;IACAC;MACA;QACA;MACA;MACA;QAAAb;MAAA;MACA;QACAA;MACA;MACA;MACAY;MACA;QACAZ;MACA;MACA;MACA;MACA;MACA;IAGA;IACA;IACAc;MAAAC;MAAAC;IAAA;MACA;MACA;MACA;MACA;MAEA;MACA;MAEA;IAEA;IACAC;MACA;MACA;MACA;IAEA;IACAC;MAEA;QACA3B;QACAC;MACA;MACA;MACA;MACA;MACA2B;QACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAGA;MACA;MACA;IAGA;IAGA;IACAC;MACA;QACAC;QACAd;MACA;QACAe;QACA;UACA;QACA;MACA;IACA;IACAC;MAEA;MACA;QACAX;MACA;IACA;IAEA;IACAY;MACA;QAAAxB;MAAA;MACA;MACA;MACA;MACA;MAEAA;QACAT;QACAC;MACA;MAEAD;MACAC;MACA;QACAD;QACAC;MACA;MACA;MACA;IACA;IACA;IACAiC;MACA;MAEA;MACA;MACAzB;QACA;QACA0B;QACAA;QACAC;MACA;MACAA,UACA3B,cACAA,aACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACA4B;MACA;IACA;IAEAC;MAEA;MACA;QAAAvB;QAAAP;MAAA;MACAoB;QACA;MACA;IACA;EACA;EACAW;IACA;EACA;EACAC,WAEA;EACAC;IAEAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;EAEA;EACAC;IACAH;MACA;QACA;MAEA;QACA;MAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MAEA;QACA;QACA;MAEA;IACA;EACA;AACA","names":["name","data","center","lng","lat","zoom","marker","position","draggable","show","drawingPolygon","editing","paths","drawingMarker","drawingEditing","infoPosition","infoOwner","infoproduct","id","methods","drawEdit","polygonUpdate","paintPolygon","syncPolygon","path","newPolygon","handler","BMap","map","infoWindowClose","infoWindowOpen","setTimeout","getPonds","url","console","goProduct","getCenterPoint","getArea","arr","Arr","getDrawingPolygon","pondsEditing","created","mounted","computed","Drawing","Polygons","Id","watch"],"sourceRoot":"src/components/ponds/AddPonds","sources":["AddMap.vue"],"sourcesContent":["<template>\r\n    <div class=\"addMap\">\r\n        <baidu-map  :scroll-wheel-zoom=\"true\" class=\"map\" :center=\"center\" :zoom=\"zoom\" @ready=\"handler\" map-type=\"BMAP_HYBRID_MAP\"\r\n            @click=\"paintPolygon\" @mousemove=\"syncPolygon\" @rightclick=\"newPolygon\"\r\n        >\r\n\r\n            <bm-scale anchor=\"BMAP_ANCHOR_TOP_RIGHT\"></bm-scale>\r\n            <bm-navigation anchor=\"BMAP_ANCHOR_TOP_RIGHT\"></bm-navigation>\r\n\r\n            <bm-marker \r\n                v-for=\"(item) in Polygons\"\r\n                :key=\"item.lat\"\r\n                :position=\"item.position\" \r\n                @click=\"infoWindowOpen(item)\"\r\n            >\r\n            </bm-marker>\r\n\r\n            <bm-info-window \r\n                :position=\"infoPosition\"\r\n                :show=\"show\" \r\n                @close=\"infoWindowClose\" \r\n            >\r\n                <div>当前池塘详细信息：</div>\r\n                <div>池塘负责人：{{infoOwner.name}}</div>\r\n                <div>养殖品种：<el-button @click=\"goProduct(infoproduct.id)\" type=\"text\">{{infoproduct.name}}</el-button></div>\r\n                <el-button type=\"text\">查看该池塘详细信息</el-button>\r\n                \r\n\r\n            </bm-info-window>\r\n\r\n            <bm-polygon \r\n                \r\n                v-for=\"(item,index) in Polygons\" \r\n                :key=\"index\" \r\n                :path=\"item.polygon\"\r\n                :editing=\"item.editing\"\r\n                \r\n            ></bm-polygon>\r\n            \r\n            <bm-polygon \r\n                :editing='drawingEditing' \r\n                :path=\"path\" \r\n                v-for=\"path,index of drawingPolygon.paths\" \r\n                :key='index+65535'\r\n                @lineupdate=\"polygonUpdate\"\r\n            ></bm-polygon>\r\n            <bm-marker v-if=\"drawingMarker\" :position='drawingMarker' ></bm-marker>\r\n        </baidu-map>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name:\"addMap\",\r\n    data(){\r\n        return {\r\n            //地图初始配置\r\n            center: {lng: 0, lat: 0},\r\n            zoom: 3,\r\n            marker:{},\r\n            position:{lng: 0, lat: 0},\r\n            draggable:false,\r\n            show:false,\r\n\r\n            //需要绘制的图行\r\n            drawingPolygon: {\r\n                editing: false,\r\n                paths: []\r\n            },\r\n            drawingMarker:{},\r\n            //当前绘制的多边形是否能编辑\r\n            drawingEditing:false,\r\n\r\n            //infowindow\r\n            infoPosition:{},\r\n            infoOwner:'',\r\n            infoproduct:'',\r\n            id:'',\r\n\r\n        }\r\n    },\r\n    methods:{\r\n\r\n        drawEdit(){\r\n            this.drawingEditing=true\r\n        },\r\n        polygonUpdate(e){\r\n            \r\n            this.drawingPolygon.paths[0]=e.target.getPath()\r\n            \r\n        },\r\n\r\n\r\n        paintPolygon (e) {\r\n            if (!this.drawingPolygon.editing) {\r\n                return\r\n            }\r\n            const {paths} = this.drawingPolygon\r\n\r\n            !paths.length && paths.push([])\r\n\r\n            paths[paths.length - 1].push(e.point)\r\n\r\n\r\n        },\r\n        syncPolygon (e) {\r\n            if (!this.drawingPolygon.editing) {\r\n                return\r\n            }\r\n            const {paths} = this.drawingPolygon\r\n            if (!paths.length) {\r\n                return\r\n            }\r\n            const path = paths[paths.length - 1]\r\n            if (!path.length) {\r\n                return\r\n            }\r\n            if (path.length === 1) {\r\n                path.push(e.point)\r\n            }\r\n            this.$set(path, path.length - 1, e.point)\r\n        },\r\n        newPolygon (e) {\r\n            if (!this.drawingPolygon.editing) {\r\n                return\r\n            }\r\n            const {paths} = this.drawingPolygon\r\n            if(!paths.length) {\r\n                paths.push([])\r\n            }\r\n            const path = paths[paths.length - 1]\r\n            path.pop()\r\n            if (path.length) {\r\n                paths.push([])\r\n            }\r\n            // this.getCenterPoint()\r\n            // this.getArea()\r\n            //此后为编辑模式\r\n            this.$store.commit('ponds/setDrawing',2)\r\n            \r\n            \r\n        },\r\n        // 初始化地图参数\r\n        handler ({BMap, map}) {\r\n            // console.log(BMap, map)\r\n            this.center.lng = 122.048\r\n            this.center.lat = 29.9424\r\n            this.zoom = 16\r\n\r\n            this.position.lng = 122.048\r\n            this.position.lat = 29.9424\r\n\r\n            this.draggable=true\r\n\r\n        },\r\n        infoWindowClose () {\r\n            this.show = false\r\n            //全部设置为false\r\n            this.$store.commit('ponds/setEditingFalse')\r\n\r\n        },\r\n        infoWindowOpen (item) {\r\n            \r\n            this.infoPosition={\r\n                lng:item.position.lng,\r\n                lat:item.position.lat\r\n            }\r\n            this.infoOwner=item.owner\r\n            this.infoproduct=item.product\r\n            this.id=item.id\r\n            setTimeout(()=>{\r\n                this.show = true\r\n            },100)\r\n\r\n            this.$store.commit('ponds/setMarker',item.position)\r\n            this.$store.commit('ponds/setEstimateArea',item.estimateArea)\r\n            this.$store.commit('ponds/setArea',item.area)\r\n            this.$store.commit('ponds/setTown',item.town)\r\n            this.$store.commit('ponds/setVillage',item.village)\r\n            this.$store.commit('ponds/setComment',item.comment)\r\n            this.$store.commit('ponds/setNumber',item.number)\r\n            this.$store.commit('ponds/setId',item.id)\r\n\r\n            \r\n            //owner/product\r\n            this.$store.commit('ponds/setOwnerMarker',item.owner)\r\n            this.$store.commit('ponds/setProductMarker',item.product)\r\n\r\n\r\n        },\r\n\r\n\r\n        //获取池塘\r\n        getPonds(){\r\n            this.$axios({\r\n                url:'/api/ponds/getAll',\r\n                methods:'GET'\r\n            }).then(res=>{\r\n                console.log(res.data.data);\r\n                if(res.data.status==200){\r\n                    this.$store.commit('ponds/setPolygons',res.data.data.data)\r\n                }\r\n            })\r\n        },\r\n        goProduct(id){\r\n\r\n            // console.log(id);\r\n            this.$router.push({\r\n                path:`/products/add?id=${id}`\r\n            })\r\n        },\r\n\r\n        //计算中心点\r\n        getCenterPoint(){\r\n            const {paths} = this.drawingPolygon\r\n            //添加marker\r\n            //计算中心点\r\n            let lng=0\r\n            let lat=0\r\n\r\n            paths[0].forEach((i,v)=>{\r\n                lng=lng+i.lng\r\n                lat=lat+i.lat\r\n            })\r\n            \r\n            lng=lng/paths[0].length\r\n            lat=lat/paths[0].length\r\n            let drawingObj={\r\n                lng:lng,\r\n                lat:lat\r\n            }\r\n            this.drawingMarker=drawingObj\r\n            this.$store.commit('ponds/setMarker',this.drawingMarker)\r\n        },\r\n        //计算面积\r\n        getArea(){\r\n            let paths=this.drawingPolygon.paths[0]\r\n\r\n            let Arr=[]\r\n            //把paths转化成需要的数组形式,paths里现在是对象\r\n            paths.forEach((i,v)=>{\r\n                let arr=[]\r\n                arr.push(i.lng)\r\n                arr.push(i.lat)\r\n                Arr.push(arr)\r\n            })\r\n            Arr.push([\r\n                paths[0].lng,\r\n                paths[0].lat\r\n            ])\r\n\r\n            var p=this.turf.polygon([Arr])\r\n            // 平方米\r\n            var area=this.turf.area(p)\r\n            // 亩\r\n            var mu=area/(1000*2/3)\r\n            //store\r\n            this.$store.commit('ponds/setEstimateArea',mu)\r\n        },\r\n        //新池塘上传store\r\n        getDrawingPolygon(){\r\n            this.$store.commit('ponds/setDrawingPolygon',this.drawingPolygon.paths[0])\r\n        },\r\n\r\n        pondsEditing(id){\r\n            \r\n            //使当前点击的点的editing=true\r\n            this.$store.commit('ponds/setEditing',{id:id,editing:true})\r\n            setTimeout(()=>{\r\n                this.show = false\r\n            },1000)\r\n        }\r\n    },\r\n    created(){\r\n        this.getPonds()\r\n    },\r\n    mounted(){\r\n\r\n    },\r\n    computed:{\r\n        \r\n        Drawing(){\r\n            return this.$store.state.ponds.drawing\r\n        },\r\n        Polygons(){\r\n            return this.$store.state.ponds.polygons\r\n        },\r\n        Id(){\r\n            return this.$store.state.ponds.id\r\n        }\r\n\r\n    },\r\n    watch:{\r\n        Drawing(n,o){\r\n            if(n==0){\r\n                this.drawingPolygon.editing=false\r\n\r\n            }else if(n==1){\r\n                this.drawingPolygon.editing=true\r\n\r\n            }else if(n==2){\r\n                this.drawingEditing=false\r\n                this.drawingPolygon.editing=false\r\n                //计算中心点\r\n                this.getCenterPoint()\r\n                //计算面积\r\n                this.getArea()\r\n                //新池塘上传store\r\n                this.getDrawingPolygon()\r\n\r\n            }else if(n==3){\r\n                this.drawingEditing=true\r\n                this.drawingPolygon.editing=false\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n    .addMap{\r\n        width: 100%;\r\n        height: 100%;\r\n        .map{\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}