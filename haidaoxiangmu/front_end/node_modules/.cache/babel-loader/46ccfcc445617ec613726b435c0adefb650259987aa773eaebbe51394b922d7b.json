{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  namespaced: true,\n  state: {\n    //获取的所有池塘\n    polygons: [],\n    //owner list，渲染的是选择的表\n    owners: [],\n    //product\n    products: [],\n    //form表，对接前端,\n    //当form表变化，就要把变化的新值添加到polygons中\n    //以后点击这个新的多边形，就根据这个新值显示\n    form: {\n      number: '',\n      //owner\n      ownerId: '',\n      owner: '',\n      //product\n      productId: '',\n      product: '',\n      //经纬度\n      lng: '',\n      lat: '',\n      //面积\n      estimateArea: '',\n      area: '',\n      //town\n      town: '',\n      village: '',\n      polygon: '',\n      comment: '',\n      checkStatus: 0,\n      id: ''\n    },\n    //是否显示绘制按钮\n    //0=>添加池塘,1=>停止绘制\n    drawing: 0,\n    editingPonds: false,\n    //新添加的图形的中心点经纬度\n    marker: {},\n    //area\n    estimateArea: '',\n    area: \"\",\n    //drawingPolygon\n    drawingPolygon: '',\n    //town/village\n    town: '',\n    village: '',\n    comment: '',\n    //owner，渲染点击点后的情况\n    ownerMarker: '',\n    productMarker: '',\n    number: '',\n    id: \"\"\n  },\n  mutations: {\n    //对获取的池塘数据进行处理\n    setPolygons(state, data) {\n      data.forEach((i, v) => {\n        let object = {\n          position: {\n            lat: '',\n            lng: ''\n          },\n          polygon: [],\n          owner: {},\n          product: {},\n          area: '',\n          estimateArea: '',\n          town: '',\n          village: '',\n          comment: '',\n          number: '',\n          editing: false,\n          id: i.id\n        };\n        object.position.lat = i.lat;\n        object.position.lng = i.lng;\n        //对i.polygon做变化\n        let tempP = i.polygon.split(';');\n        tempP.forEach(subi => {\n          let lat = subi.split(',')[1];\n          let lng = subi.split(',')[0];\n          let temp_obj = {\n            lat: lat,\n            lng: lng\n          };\n          object.polygon.push(temp_obj);\n        });\n        //对池塘的owner做处理\n        object.owner = i.owner;\n\n        //对池塘的养殖品种做处理\n        object.product = i.product;\n        object.area = i.area;\n        object.estimateArea = i.estimateArea;\n        object.town = i.town;\n        object.village = i.village;\n        object.comment = i.comment;\n        object.number = i.number;\n        state.polygons.push(object);\n      });\n    },\n    //以下两个方法用于设置所有owners和products\n    setOwners(state, data) {\n      state.owners = data;\n    },\n    setProducts(state, data) {\n      state.products = data;\n    },\n    //form表\n    setForm(state, data) {\n      state.form = data;\n      //添加到polygons中\n      //将data和上面对象对接\n      let object = {\n        position: {\n          lat: data.lat,\n          lng: data.lng\n        },\n        polygon: [],\n        owner: data.owner,\n        product: data.product,\n        area: data,\n        estimateArea: '',\n        town: '',\n        village: '',\n        comment: '',\n        number: '',\n        editing: false,\n        id: ''\n      };\n    },\n    setEditing(state, data) {\n      state.polygons.forEach((i, v) => {\n        if (data.id == i.id) {\n          i.editing = data.editing;\n        }\n      });\n    },\n    setEditingFalse(state) {\n      state.polygons.forEach((i, v) => {\n        i.editing = false;\n      });\n    },\n    setDrawing(state, data) {\n      state.drawing = data;\n    },\n    setEditingPonds(state, data) {\n      state.editingPonds = data;\n    },\n    setId(state, data) {\n      state.id = data;\n    },\n    setMarker(state, data) {\n      state.marker = data;\n    },\n    setPolygonCenterMarker(state, data) {\n      state.polygons.forEach((i, v) => {\n        if (i.id == data.id) {\n          i.position.lng = data.lng;\n          i.position.lat = data.lat;\n        }\n      });\n    },\n    setEstimateArea(state, data) {\n      state.estimateArea = data;\n    },\n    setArea(state, data) {\n      state.area = data;\n    },\n    setTown(state, data) {\n      state.town = data;\n    },\n    setVillage(state, data) {\n      state.village = data;\n    },\n    setComment(state, data) {\n      state.comment = data;\n    },\n    setOwnerMarker(state, data) {\n      state.ownerMarker = data;\n    },\n    setProductMarker(state, data) {\n      state.productMarker = data;\n    },\n    setNumber(state, data) {\n      state.number = data;\n    },\n    setDrawingPolygon(state, data) {\n      console.log(data);\n      let str = '';\n      data.forEach((i, v) => {\n        str = str.concat(i.lng, ',', i.lat, ';');\n      });\n      str = str.slice(0, str.length - 1);\n      state.drawingPolygon = str;\n    }\n  }\n};","map":{"version":3,"names":["namespaced","state","polygons","owners","products","form","number","ownerId","owner","productId","product","lng","lat","estimateArea","area","town","village","polygon","comment","checkStatus","id","drawing","editingPonds","marker","drawingPolygon","ownerMarker","productMarker","mutations","setPolygons","data","forEach","i","v","object","position","editing","tempP","split","subi","temp_obj","push","setOwners","setProducts","setForm","setEditing","setEditingFalse","setDrawing","setEditingPonds","setId","setMarker","setPolygonCenterMarker","setEstimateArea","setArea","setTown","setVillage","setComment","setOwnerMarker","setProductMarker","setNumber","setDrawingPolygon","console","log","str","concat","slice","length"],"sources":["C:/Users/29903/Desktop/毕业设计的各种准备/haidaoxiangmu/hias/src/store/Ponds/index.js"],"sourcesContent":["export default {\r\n    namespaced:true,\r\n    state:{\r\n        //获取的所有池塘\r\n        polygons:[],\r\n        //owner list，渲染的是选择的表\r\n        owners:[],\r\n        //product\r\n        products:[],        \r\n\r\n        //form表，对接前端,\r\n        //当form表变化，就要把变化的新值添加到polygons中\r\n        //以后点击这个新的多边形，就根据这个新值显示\r\n        form:{\r\n            number:'',\r\n            //owner\r\n            ownerId:'',\r\n            owner:'',\r\n            //product\r\n            productId:'',\r\n            product:'',\r\n            //经纬度\r\n            lng:'',\r\n            lat:'',\r\n            //面积\r\n            estimateArea:'',\r\n            area:'',\r\n            //town\r\n            town:'',\r\n            village:'',\r\n            polygon:'',\r\n            comment:'',\r\n            checkStatus:0,\r\n            id:'',\r\n        },\r\n\r\n\r\n\r\n\r\n        //是否显示绘制按钮\r\n        //0=>添加池塘,1=>停止绘制\r\n        drawing:0,\r\n        editingPonds:false,\r\n\r\n\r\n\r\n\r\n        //新添加的图形的中心点经纬度\r\n        marker:{},\r\n        //area\r\n        estimateArea:'',\r\n        area:\"\",\r\n        //drawingPolygon\r\n        drawingPolygon:'',\r\n        //town/village\r\n        town:'',\r\n        village:'',\r\n        comment:'',\r\n        //owner，渲染点击点后的情况\r\n        ownerMarker:'',\r\n        productMarker:'',\r\n        number:'',\r\n        id:\"\"\r\n    },\r\n    mutations:{\r\n        //对获取的池塘数据进行处理\r\n        setPolygons(state,data){\r\n\r\n            data.forEach((i,v)=>{\r\n                let object={\r\n                    position:{\r\n                        lat:'',\r\n                        lng:'',\r\n                    },\r\n                    polygon:[],\r\n                    owner:{},\r\n                    product:{},\r\n                    area:'',\r\n                    estimateArea:'',\r\n                    town:'',\r\n                    village:'',\r\n                    comment:'',\r\n                    number:'',\r\n                    editing:false,\r\n                    id:i.id,\r\n                }\r\n                object.position.lat=i.lat\r\n                object.position.lng=i.lng\r\n                //对i.polygon做变化\r\n                let tempP=i.polygon.split(';')\r\n                tempP.forEach(subi=>{\r\n                    let lat=subi.split(',')[1]\r\n                    let lng=subi.split(',')[0]\r\n                    let temp_obj={\r\n                        lat:lat,\r\n                        lng:lng\r\n                    }\r\n                    object.polygon.push(temp_obj)\r\n                })\r\n                //对池塘的owner做处理\r\n                object.owner=i.owner\r\n\r\n                //对池塘的养殖品种做处理\r\n                object.product=i.product\r\n\r\n                object.area=i.area\r\n                object.estimateArea=i.estimateArea\r\n                object.town=i.town\r\n                object.village=i.village\r\n                object.comment=i.comment\r\n                object.number=i.number\r\n                state.polygons.push(object)\r\n            })\r\n        },\r\n        //以下两个方法用于设置所有owners和products\r\n        setOwners(state,data){\r\n            state.owners=data\r\n        },\r\n        setProducts(state,data){\r\n            state.products=data\r\n        },\r\n        //form表\r\n        setForm(state,data){\r\n            state.form=data\r\n            //添加到polygons中\r\n            //将data和上面对象对接\r\n            let object={\r\n                position:{\r\n                    lat:data.lat,\r\n                    lng:data.lng,\r\n                },\r\n                polygon:[],\r\n                owner:data.owner,\r\n                product:data.product,\r\n                area:data,\r\n                estimateArea:'',\r\n                town:'',\r\n                village:'',\r\n                comment:'',\r\n                number:'',\r\n                editing:false,\r\n                id:'',\r\n            }\r\n        },\r\n\r\n        setEditing(state,data){\r\n            state.polygons.forEach((i,v)=>{\r\n                if(data.id==i.id){\r\n                    i.editing=data.editing\r\n                }\r\n            })\r\n        },\r\n        setEditingFalse(state){\r\n            state.polygons.forEach((i,v)=>{\r\n                i.editing=false\r\n            })\r\n        },\r\n        \r\n        setDrawing(state,data){\r\n            state.drawing=data\r\n        },\r\n        setEditingPonds(state,data){\r\n            state.editingPonds=data\r\n        },\r\n\r\n\r\n\r\n        setId(state,data){\r\n            state.id=data\r\n        },\r\n\r\n        setMarker(state,data){\r\n            state.marker=data\r\n        },\r\n\r\n        setPolygonCenterMarker(state,data){\r\n            state.polygons.forEach((i,v)=>{\r\n                if(i.id==data.id){\r\n                    i.position.lng=data.lng\r\n                    i.position.lat=data.lat\r\n                }\r\n            })\r\n        },\r\n\r\n        setEstimateArea(state,data){\r\n            state.estimateArea=data\r\n        },\r\n        setArea(state,data){\r\n            state.area=data\r\n        },\r\n        setTown(state,data){\r\n            state.town=data\r\n        },\r\n        setVillage(state,data){\r\n            state.village=data\r\n        },\r\n        setComment(state,data){\r\n            state.comment=data\r\n        },\r\n        setOwnerMarker(state,data){\r\n            state.ownerMarker=data\r\n        },\r\n        setProductMarker(state,data){\r\n            state.productMarker=data\r\n        },\r\n        setNumber(state,data){\r\n            state.number=data\r\n        },\r\n        setDrawingPolygon(state,data){\r\n            console.log(data);\r\n            let str=''\r\n            data.forEach((i,v)=>{\r\n                str=str.concat(i.lng,',',i.lat,';')\r\n            })\r\n            str=str.slice(0, str.length - 1)\r\n            \r\n            state.drawingPolygon=str\r\n        }\r\n\r\n    }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}