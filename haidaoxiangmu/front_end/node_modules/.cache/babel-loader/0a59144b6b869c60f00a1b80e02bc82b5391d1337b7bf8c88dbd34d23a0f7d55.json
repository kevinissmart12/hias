{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  namespaced: true,\n  state: {\n    //获取的所有池塘\n    polygons: [],\n    //owner list，渲染的是选择的表\n    owners: [],\n    //product\n    products: [],\n    //form表，对接前端,\n    //当form表变化，就要把变化的新值添加到polygons中\n    //以后点击这个新的多边形，就根据这个新值显示\n    form: {\n      number: '',\n      //owner\n      ownerId: '',\n      owner: '',\n      //product\n      productId: '',\n      product: '',\n      //经纬度\n      lng: '',\n      lat: '',\n      //面积\n      estimateArea: '',\n      area: '',\n      //town\n      town: '',\n      village: '',\n      polygon: '',\n      comment: '',\n      checkStatus: 0,\n      id: ''\n    },\n    //添加池塘和停止绘制\n    addPond: false,\n    //编辑池塘和停止编辑\n    editPond: false,\n    //当前选中的池塘id\n    chosenId: '',\n    //drawingPolygon\n    drawingPolygon: ''\n  },\n  mutations: {\n    //对获取的池塘数据进行处理\n    setPolygons(state, data) {\n      if (state.polygons.length == 0) {\n        data.forEach((i, v) => {\n          let object = {\n            position: {\n              lat: '',\n              lng: ''\n            },\n            polygon: [],\n            owner: {},\n            product: {},\n            area: '',\n            estimateArea: '',\n            town: '',\n            village: '',\n            comment: '',\n            number: '',\n            editing: false,\n            id: i.id\n          };\n          object.position.lat = i.lat;\n          object.position.lng = i.lng;\n          //对i.polygon做变化\n          let tempP = i.polygon.split(';');\n          tempP.forEach(subi => {\n            let lat = subi.split(',')[1];\n            let lng = subi.split(',')[0];\n            let temp_obj = {\n              lat: lat,\n              lng: lng\n            };\n            object.polygon.push(temp_obj);\n          });\n          //对池塘的owner做处理\n          object.owner = i.owner;\n\n          //对池塘的养殖品种做处理\n          object.product = i.product;\n          object.area = i.area;\n          object.estimateArea = i.estimateArea;\n          object.town = i.town;\n          object.village = i.village;\n          object.comment = i.comment;\n          object.number = i.number;\n          state.polygons.push(object);\n        });\n      }\n    },\n    //以下两个方法用于设置所有owners和products\n    setOwners(state, data) {\n      state.owners = data;\n    },\n    setProducts(state, data) {\n      state.products = data;\n    },\n    //form表\n    setForm(state, data) {\n      //更新form\n      state.form = data;\n      state.form.lat = data.position.lat || '';\n      state.form.lng = data.position.lng || '';\n\n      //添加到polygons中\n      //将data和上面对象对接\n      let object = {\n        position: {\n          lat: data.lat,\n          lng: data.lng\n        },\n        polygon: data.polygon,\n        owner: data.owner,\n        ownerId: data.ownerId,\n        product: data.product,\n        productId: data.productId,\n        area: data.area,\n        estimateArea: data.estimateArea,\n        town: data.town,\n        village: data.village,\n        comment: data.comment,\n        number: data.number,\n        editing: false\n      };\n      if (state.chosenId) {\n        //如果选中的池塘存在id，\n        object.id = state.chosenId;\n        state.polygons.forEach((i, v) => {\n          if (i.id == object.id) {\n            //已存在,覆盖\n            i = object;\n          }\n        });\n        //把formye\n      } else {\n        object.id = 65535;\n        if (state.polygons[state.polygons.length - 1].id != object.id) {\n          //push\n          state.polygons.push(object);\n        } else {\n          //修改\n          state.polygons[state.polygons.length - 1] = object;\n        }\n      }\n    },\n    //添加池塘和停止绘制\n    setAddPond(state, data) {\n      state.addPond = data;\n    },\n    //编辑池塘和停止编辑\n    setEditPond(state, data) {\n      state.editPond = data;\n    },\n    //以下两个函数，是用来设置当前选中的多边形是否可以编辑\n    //设置为可以编辑\n    setEditing(state, data) {\n      console.log(data);\n      state.polygons.forEach((i, v) => {\n        if (data.id == i.id) {\n          i.editing = data.editing;\n        }\n      });\n    },\n    //全部设置为不可编辑\n    setEditingFalse(state) {\n      state.polygons.forEach((i, v) => {\n        i.editing = false;\n      });\n    },\n    //chosenId\n    setChosenId(state, data) {\n      state.chosenId = data;\n    },\n    editPolygon(state, data) {\n      state.polygons.forEach((i, v) => {\n        if (i.id == data.id) {\n          i.position.lng = data.lng;\n          i.position.lat = data.lat;\n          i.estimateArea = data.estimateArea;\n          i.polygon = data.paths;\n          //更新form\n        }\n      });\n    },\n\n    setDrawingPolygon(state, data) {\n      console.log(data);\n      let str = '';\n      data.forEach((i, v) => {\n        str = str.concat(i.lng, ',', i.lat, ';');\n      });\n      str = str.slice(0, str.length - 1);\n      state.drawingPolygon = str;\n    }\n  }\n};","map":{"version":3,"names":["namespaced","state","polygons","owners","products","form","number","ownerId","owner","productId","product","lng","lat","estimateArea","area","town","village","polygon","comment","checkStatus","id","addPond","editPond","chosenId","drawingPolygon","mutations","setPolygons","data","length","forEach","i","v","object","position","editing","tempP","split","subi","temp_obj","push","setOwners","setProducts","setForm","setAddPond","setEditPond","setEditing","console","log","setEditingFalse","setChosenId","editPolygon","paths","setDrawingPolygon","str","concat","slice"],"sources":["C:/Users/29903/Desktop/毕业设计的各种准备/haidaoxiangmu/hias/src/store/Ponds/index.js"],"sourcesContent":["export default {\r\n    namespaced:true,\r\n    state:{\r\n        //获取的所有池塘\r\n        polygons:[],\r\n        //owner list，渲染的是选择的表\r\n        owners:[],\r\n        //product\r\n        products:[],        \r\n\r\n        //form表，对接前端,\r\n        //当form表变化，就要把变化的新值添加到polygons中\r\n        //以后点击这个新的多边形，就根据这个新值显示\r\n        form:{\r\n            number:'',\r\n            //owner\r\n            ownerId:'',\r\n            owner:'',\r\n            //product\r\n            productId:'',\r\n            product:'',\r\n            //经纬度\r\n            lng:'',\r\n            lat:'',\r\n            //面积\r\n            estimateArea:'',\r\n            area:'',\r\n            //town\r\n            town:'',\r\n            village:'',\r\n            polygon:'',\r\n            comment:'',\r\n            checkStatus:0,\r\n            id:'',\r\n        },\r\n\r\n        //添加池塘和停止绘制\r\n        addPond:false,\r\n        //编辑池塘和停止编辑\r\n        editPond:false,\r\n        //当前选中的池塘id\r\n        chosenId:'',\r\n\r\n\r\n\r\n\r\n        //drawingPolygon\r\n        drawingPolygon:'',\r\n\r\n    },\r\n    mutations:{\r\n        //对获取的池塘数据进行处理\r\n        setPolygons(state,data){\r\n            if(state.polygons.length==0){\r\n                data.forEach((i,v)=>{\r\n                    let object={\r\n                        position:{\r\n                            lat:'',\r\n                            lng:'',\r\n                        },\r\n                        polygon:[],\r\n                        owner:{},\r\n                        product:{},\r\n                        area:'',\r\n                        estimateArea:'',\r\n                        town:'',\r\n                        village:'',\r\n                        comment:'',\r\n                        number:'',\r\n                        editing:false,\r\n                        id:i.id,\r\n                    }\r\n                    object.position.lat=i.lat\r\n                    object.position.lng=i.lng\r\n                    //对i.polygon做变化\r\n                    let tempP=i.polygon.split(';')\r\n                    tempP.forEach(subi=>{\r\n                        let lat=subi.split(',')[1]\r\n                        let lng=subi.split(',')[0]\r\n                        let temp_obj={\r\n                            lat:lat,\r\n                            lng:lng\r\n                        }\r\n                        object.polygon.push(temp_obj)\r\n                    })\r\n                    //对池塘的owner做处理\r\n                    object.owner=i.owner\r\n\r\n                    //对池塘的养殖品种做处理\r\n                    object.product=i.product\r\n\r\n                    object.area=i.area\r\n                    object.estimateArea=i.estimateArea\r\n                    object.town=i.town\r\n                    object.village=i.village\r\n                    object.comment=i.comment\r\n                    object.number=i.number\r\n                    state.polygons.push(object)\r\n                })\r\n            }\r\n\r\n        },\r\n        //以下两个方法用于设置所有owners和products\r\n        setOwners(state,data){\r\n            state.owners=data\r\n        },\r\n        setProducts(state,data){\r\n            state.products=data\r\n        },\r\n        //form表\r\n        setForm(state,data){\r\n            //更新form\r\n            state.form=data\r\n            state.form.lat=data.position.lat||''\r\n            state.form.lng=data.position.lng||''\r\n\r\n            //添加到polygons中\r\n            //将data和上面对象对接\r\n            let object={\r\n                position:{\r\n                    lat:data.lat,\r\n                    lng:data.lng,\r\n                },\r\n                polygon:data.polygon,\r\n                owner:data.owner,\r\n                ownerId:data.ownerId,\r\n                product:data.product,\r\n                productId:data.productId,\r\n                area:data.area,\r\n                estimateArea:data.estimateArea,\r\n                town:data.town,\r\n                village:data.village,\r\n                comment:data.comment,\r\n                number:data.number,\r\n                \r\n                editing:false,\r\n            }\r\n\r\n            if(state.chosenId){\r\n                //如果选中的池塘存在id，\r\n                object.id=state.chosenId\r\n                state.polygons.forEach((i,v)=>{\r\n                    if(i.id==object.id){\r\n                        //已存在,覆盖\r\n                        i=object\r\n                    }\r\n                })\r\n                //把formye\r\n            }else{\r\n                object.id=65535\r\n                if(state.polygons[state.polygons.length-1].id!=object.id){\r\n                    //push\r\n                    state.polygons.push(object)\r\n                }else{\r\n                    //修改\r\n                    state.polygons[state.polygons.length-1]=object\r\n                }\r\n            }\r\n\r\n\r\n            \r\n        },\r\n\r\n        //添加池塘和停止绘制\r\n        setAddPond(state,data){\r\n            state.addPond=data\r\n        },\r\n        //编辑池塘和停止编辑\r\n        setEditPond(state,data){\r\n            state.editPond=data\r\n        },\r\n        //以下两个函数，是用来设置当前选中的多边形是否可以编辑\r\n        //设置为可以编辑\r\n        setEditing(state,data){\r\n            console.log(data);\r\n            state.polygons.forEach((i,v)=>{\r\n                if(data.id==i.id){\r\n                    i.editing=data.editing\r\n                }\r\n            })\r\n        },\r\n        //全部设置为不可编辑\r\n        setEditingFalse(state){\r\n            state.polygons.forEach((i,v)=>{\r\n                i.editing=false\r\n            })\r\n        },\r\n\r\n        //chosenId\r\n        setChosenId(state,data){\r\n            state.chosenId=data\r\n        },\r\n\r\n\r\n        editPolygon(state,data){\r\n            state.polygons.forEach((i,v)=>{\r\n                if(i.id==data.id){\r\n                    i.position.lng=data.lng\r\n                    i.position.lat=data.lat\r\n                    i.estimateArea=data.estimateArea\r\n                    i.polygon=data.paths\r\n                    //更新form\r\n\r\n                }\r\n            })\r\n        },\r\n\r\n\r\n        setDrawingPolygon(state,data){\r\n            console.log(data);\r\n            let str=''\r\n            data.forEach((i,v)=>{\r\n                str=str.concat(i.lng,',',i.lat,';')\r\n            })\r\n            str=str.slice(0, str.length - 1)\r\n            \r\n            state.drawingPolygon=str\r\n        }\r\n\r\n    }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}